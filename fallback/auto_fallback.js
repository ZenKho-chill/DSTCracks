const { exec } = require("child_process");
const axios = require("axios");
const { spawn } = require("child_process");

const CHECK_URLS = [
    "https://backend.dstcracks.site/games",
    "https://dstcracks.site"
];

const CLOUDFLARE_API = "https://api.cloudflare.com/client/v4/zones/a3c9e25af30b8fc3d7e978637784b789/dns_records";
const API_KEY = "uKXktRxqr1YKKzQlViq8YBmLCorz7D1hC9XgCKLv";

const DOMAINS = [
    { name: "dstcracks.site", backupIP: "198.46.245.180" },
    { name: "backend.dstcracks.site", backupIP: "198.46.245.180" }
];

const MAX_RETRIES = 3;
const RETRY_INTERVAL = 5 * 60 * 1000;
const TUNNEL_CNAME = "7d2fd121-1ef0-4d3d-9c85-093e2c9a77e6.cfargotunnel.com";

const DISCORD_WEBHOOK = "https://discord.com/api/webhooks/1345575847431503995/ZnoNQGWQe241ZQrmnkP3K28pC1rj1F4uP2lTqHh3MYyURDLYTdoTgzg-15t6mSwU84WA";

async function sendDiscordMessage(content) {
    try {
        await axios.post(DISCORD_WEBHOOK, { content });
        console.log("üì© ƒê√£ g·ª≠i th√¥ng b√°o l√™n Discord.");
    } catch (error) {
        console.log("‚ùå L·ªói khi g·ª≠i th√¥ng b√°o Discord:", error.message);
    }
}

async function isTunnelActive() {
    try {
        const response = await axios.get("http://localhost:3333/metrics", { timeout: 5000 });
        return response.status === 200;
    } catch (error) {
        return false;
    }
}

async function updateDNS(domain, recordType, value) {
    try {
        const response = await axios.get(CLOUDFLARE_API, {
            headers: { Authorization: `Bearer ${API_KEY}`, "Content-Type": "application/json" }
        });
        if (!response.data.success) {
            console.log(`‚ùå L·ªói l·∫•y danh s√°ch DNS (${domain}):`, response.data.errors);
            return;
        }
        const dnsRecord = response.data.result.find(r => r.name === domain);
        if (!dnsRecord) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi DNS (${domain})!`);
            return;
        }
        const updateResponse = await axios.put(`${CLOUDFLARE_API}/${dnsRecord.id}`, {
            type: recordType,
            name: domain,
            content: value,
            ttl: 1,
            proxied: (recordType === "CNAME")
        }, {
            headers: { Authorization: `Bearer ${API_KEY}`, "Content-Type": "application/json" }
        });
        if (updateResponse.data.success) {
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t DNS: ${domain} ‚Üí ${value}`);
            sendDiscordMessage(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t DNS: ${domain} ‚Üí ${value}`);
        } else {
            console.log(`‚ùå L·ªói khi c·∫≠p nh·∫≠t DNS (${domain}):`, updateResponse.data.errors);
        }
    } catch (error) {
        console.log(`‚ùå L·ªói g·ªçi API Cloudflare (${domain}):`, error.message);
    }
}

async function fallbackToARecords() {
    console.log("‚ö†Ô∏è Chuy·ªÉn DNS v·ªÅ A Record...");
    for (const domain of DOMAINS) {
        await updateDNS(domain.name, "A", domain.backupIP);
    }
    setTimeout(() => restartTunnel(), RETRY_INTERVAL);
}

function restartTunnel(retries = 0) {
    console.log(`üîÑ Th·ª≠ restart tunnel (${retries + 1}/${MAX_RETRIES})...`);
    sendDiscordMessage(`‚ö†Ô∏è Tunnel g·∫∑p s·ª± c·ªë! ƒêang th·ª≠ restart (${retries + 1}/${MAX_RETRIES})...`);
    exec("taskkill /IM cloudflared.exe /F", (error, stdout, stderr) => {
        console.log("‚úÖ ƒê√£ d·ª´ng Tunnel, kh·ªüi ƒë·ªông l·∫°i...");
        spawn("cmd", ["/c", "start", "cmd", "/k", "cloudflared tunnel --config C:\\Users\\l9xphucvps\\.cloudflared\\dstcracks.yml run dstcracks"]);
        setTimeout(async () => {
            if (await isTunnelActive()) {
                console.log("üöÄ Tunnel ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i! Chuy·ªÉn DNS v·ªÅ CNAME...");
                sendDiscordMessage("‚úÖ Tunnel ƒë√£ ho·∫°t ƒë·ªông! Kh√¥i ph·ª•c CNAME...");
                for (const domain of DOMAINS) {
                    await updateDNS(domain.name, "CNAME", TUNNEL_CNAME);
                }
                setTimeout(() => process.exit(0), 5000);
            } else if (retries < MAX_RETRIES - 1) {
                setTimeout(() => restartTunnel(retries + 1), RETRY_INTERVAL);
            } else {
                console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i Tunnel, k√≠ch ho·∫°t fallback...");
                sendDiscordMessage("‚ùå Kh√¥ng th·ªÉ restart Tunnel. Chuy·ªÉn sang fallback (A Record). ");
                fallbackToARecords();
            }
        }, 30000);
    });
}

async function main() {
    if (await isTunnelActive()) {
        console.log("‚úÖ Tunnel ƒëang ho·∫°t ƒë·ªông, tho√°t script...");
        process.exit(0);
    }
    console.log("‚ö†Ô∏è Tunnel g·∫∑p s·ª± c·ªë, th·ª≠ restart...");
    sendDiscordMessage("‚ö†Ô∏è Tunnel g·∫∑p s·ª± c·ªë! B·∫Øt ƒë·∫ßu th·ª≠ restart...");
    restartTunnel();
}

main();
